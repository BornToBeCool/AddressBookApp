{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nconst store = createStore({\n  state() {\n    return {\n      contacts: [],\n      contactIndex: null\n    };\n  },\n  getters: {\n    // returns the cotants array\n    contacts(state) {\n      return state.contacts;\n    },\n    // returns the specific by index\n    loadContact(state) {\n      return state.contacts[state.contactIndex];\n    }\n  },\n  mutations: {\n    // loop through the input array and push every element to contacts array\n    loadContacts(state, inputArray) {\n      for (let i = 0; i < inputArray.length; i++) {\n        state.contacts.push(inputArray[i]);\n      }\n    },\n    // set the contacts array to empty\n    updateContacts(state) {\n      state.contacts = [];\n    },\n    // deletes a contact by input the id \n    deleteContact(state, id) {\n      state.contacts.slice(contact => contact.id == id);\n    },\n    // saves the index of the inputed contact\n    savedIndex(state, idx) {\n      state.contactIndex = idx;\n    },\n    saveContact(state, contact) {\n      const index = state.contactIndex;\n      if (index !== -1) {\n        state.contacts[index] = contact;\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","contacts","contactIndex","getters","loadContact","mutations","loadContacts","inputArray","i","length","push","updateContacts","deleteContact","id","slice","contact","savedIndex","idx","saveContact","index"],"sources":["C:/Users/George/Desktop/addressbookapp/FrontEnd/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\nconst store = createStore({\n  state() {\n    return {\n      contacts: [ \n\n      ],\n      contactIndex: null,\n    };\n  },\n  getters: {\n    // returns the cotants array\n    contacts(state) {\n      return state.contacts;\n    },\n    // returns the specific by index\n    loadContact(state) {\n      return state.contacts[state.contactIndex];\n    },\n  },\n  mutations: {\n    // loop through the input array and push every element to contacts array\n    loadContacts(state, inputArray) {\n      for(let i = 0; i < inputArray.length; i++){\n        state.contacts.push(inputArray[i])\n      }\n    },\n    // set the contacts array to empty\n    updateContacts(state){\n      state.contacts = []\n    },\n    // deletes a contact by input the id \n    deleteContact(state, id){\n      state.contacts.slice((contact) => contact.id == id);\n    },\n    // saves the index of the inputed contact\n    savedIndex(state, idx) {\n      state.contactIndex = idx;\n    },\n    saveContact(state, contact) {\n      const index = state.contactIndex;\n      if (index !== -1) {\n        state.contacts[index] = contact;\n      }\n    },\n  },\n});\n\nexport default store;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACxBE,KAAK,GAAG;IACN,OAAO;MACLC,QAAQ,EAAE,EAET;MACDC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAF,QAAQ,CAACD,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,QAAQ;IACvB,CAAC;IACD;IACAG,WAAW,CAACJ,KAAK,EAAE;MACjB,OAAOA,KAAK,CAACC,QAAQ,CAACD,KAAK,CAACE,YAAY,CAAC;IAC3C;EACF,CAAC;EACDG,SAAS,EAAE;IACT;IACAC,YAAY,CAACN,KAAK,EAAEO,UAAU,EAAE;MAC9B,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,EAAE,EAAC;QACxCR,KAAK,CAACC,QAAQ,CAACS,IAAI,CAACH,UAAU,CAACC,CAAC,CAAC,CAAC;MACpC;IACF,CAAC;IACD;IACAG,cAAc,CAACX,KAAK,EAAC;MACnBA,KAAK,CAACC,QAAQ,GAAG,EAAE;IACrB,CAAC;IACD;IACAW,aAAa,CAACZ,KAAK,EAAEa,EAAE,EAAC;MACtBb,KAAK,CAACC,QAAQ,CAACa,KAAK,CAAEC,OAAO,IAAKA,OAAO,CAACF,EAAE,IAAIA,EAAE,CAAC;IACrD,CAAC;IACD;IACAG,UAAU,CAAChB,KAAK,EAAEiB,GAAG,EAAE;MACrBjB,KAAK,CAACE,YAAY,GAAGe,GAAG;IAC1B,CAAC;IACDC,WAAW,CAAClB,KAAK,EAAEe,OAAO,EAAE;MAC1B,MAAMI,KAAK,GAAGnB,KAAK,CAACE,YAAY;MAChC,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBnB,KAAK,CAACC,QAAQ,CAACkB,KAAK,CAAC,GAAGJ,OAAO;MACjC;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAehB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}